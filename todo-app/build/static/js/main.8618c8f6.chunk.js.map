{"version":3,"sources":["Todo.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todo","Fragment","className","this","props","todo","name","description","onClick","onRemove","React","Component","TodoList","todos","map","index","key","App","handleAdd","setState","preState","newTodo","state","handleRemove","id","newState","i","length","handleChange","e","target","value","onChange","type","required","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAQqBA,G,uLAEjB,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,WACb,8BAAOC,KAAKC,MAAMC,KAAKC,KAAvB,KACA,8BAAOH,KAAKC,MAAMC,KAAKE,aACvB,4BAAQC,QAASL,KAAKC,MAAMK,UAA5B,W,GAPwBC,IAAMC,YCCnBC,E,iLACT,IAAD,OACP,OACE,kBAAC,IAAMX,SAAP,KACGE,KAAKC,MAAMS,MAAMC,KAAI,SAACT,EAAMU,GAC3B,OAAO,kBAAC,EAAD,CAAMN,SAAW,kBAAM,EAAKL,MAAMK,SAASM,IAAQC,IAAKD,EAAOV,KAAMA,Y,GALhDM,a,6jBC+GvBM,E,YA3Gb,WAAYb,GAAgB,IAAD,8BACzB,4CAAMA,KAsBRc,UAAY,WACV,EAAKC,UAAS,SAAAC,GACZ,MAAO,CACLC,QAAS,GACTR,MAAM,GAAD,mBAAMO,EAASP,OAAf,CAAsB,EAAKS,MAAMD,eA3BjB,EA+B3BE,aAAe,SAACC,GAEd,IADA,IAAIC,EAA4B,GACvBC,EAAI,EAAGA,EAAI,EAAKJ,MAAMT,MAAMc,OAAQD,IACvCA,IAAMF,IAGVC,EAAQ,sBAAOA,GAAP,CAAiB,EAAKH,MAAMT,MAAMa,MAG5C,EAAKP,UACH,WACE,MAAO,CACLE,QAAQ,EAAD,GAAO,EAAKC,MAAMD,SACzBR,MAAM,YAAKY,QA5CQ,EAiD3BG,aAAe,SAACC,GACd,IAAIR,EAAoB,CACtBG,GAAI,EAAKF,MAAMD,QAAQG,GACvBlB,KAAM,EAAKgB,MAAMD,QAAQf,KACzBC,YAAa,EAAKe,MAAMD,QAAQd,aAGZ,SAAlBsB,EAAEC,OAAOxB,KACXe,EAAQf,KAAOuB,EAAEC,OAAOC,MAExBV,EAAQd,YAAcsB,EAAEC,OAAOC,MAEjC,EAAKZ,UACH,WACE,MAAO,CACLE,QAAQ,EAAD,GAAOA,GACdR,MAAM,YAAK,EAAKS,MAAMT,YA/D5B,EAAKS,MAAQ,CACXD,QAAS,GACTR,MAAO,CACL,CACEW,GAAI,EACJlB,KAAM,MACNC,YAAa,uBAEf,CACEiB,GAAI,EACJlB,KAAM,MACNC,YAAa,uBAEf,CACEiB,GAAI,EACJlB,KAAM,QACNC,YAAa,2BAlBM,E,sEAsEjB,IAAD,OACP,OACE,kBAAC,IAAMN,SAAP,KACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YACb,2BACEsB,GAAG,OACHlB,KAAK,OACL0B,SAAU,SAAAH,GAAC,OAAI,EAAKD,aAAaC,IACjCI,KAAK,OACLC,UAAQ,IAEV,2BAAOC,QAAQ,QAAf,SAEF,yBAAKjC,UAAU,YACb,2BACEsB,GAAG,cACHlB,KAAK,cACL0B,SAAU,SAAAH,GAAC,OAAI,EAAKD,aAAaC,IACjCI,KAAK,OACLC,UAAQ,IAEV,2BAAOC,QAAQ,eAAf,gBAEF,4BAAQ3B,QAAS,kBAAM,EAAKU,cAA5B,MAEF,yBAAKhB,UAAU,aACb,kBAAC,EAAD,CACEO,SAAU,SAAAe,GAAE,OAAI,EAAKD,aAAaC,IAClCX,MAAOV,KAAKmB,MAAMT,c,GApGZH,IAAMC,WCAJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8618c8f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TodoType } from \"./types\";\r\n\r\ninterface IProps {\r\n  todo: TodoType;\r\n  onRemove(): void;\r\n}\r\n\r\nexport default class Todo extends React.Component<IProps> {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"infoBox\">\r\n          <span>{this.props.todo.name}:</span>\r\n          <span>{this.props.todo.description}</span>\r\n          <button onClick={this.props.onRemove}>x</button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport { TodoType } from \"./types\";\r\n\r\ninterface IProps {\r\n  todos: Array<TodoType>;\r\n  onRemove(id: number): void\r\n}\r\n\r\nexport default class TodoList extends Component<IProps, {}> {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.todos.map((todo, index) => {\r\n          return <Todo onRemove={ () => this.props.onRemove(index)} key={index} todo={todo} />;\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./TodoList\";\nimport { TodoType } from \"./types\";\n\ninterface IProps {}\n\ninterface IState {\n  todos: Array<TodoType>;\n  newTodo: TodoType;\n}\n\nclass App extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      newTodo: {},\n      todos: [\n        {\n          id: 0,\n          name: \"One\",\n          description: \"Description for One\"\n        },\n        {\n          id: 1,\n          name: \"Two\",\n          description: \"Description for Two\"\n        },\n        {\n          id: 2,\n          name: \"Three\",\n          description: \"Description for Three\"\n        }\n      ]\n    };\n  }\n  handleAdd = (): void => {\n    this.setState(preState => {\n      return {\n        newTodo: {},\n        todos: [...preState.todos, this.state.newTodo]\n      };\n    });\n  };\n  handleRemove = (id: number): void => {\n    let newState: Array<TodoType> = [];\n    for (let i = 0; i < this.state.todos.length; i++) {\n      if (i === id) {\n        continue;\n      }\n      newState = [...newState, this.state.todos[i]];\n    }\n\n    this.setState(\n      (): IState => {\n        return {\n          newTodo: { ...this.state.newTodo },\n          todos: [...newState]\n        };\n      }\n    );\n  };\n  handleChange = (e: any) => {\n    let newTodo: TodoType = {\n      id: this.state.newTodo.id,\n      name: this.state.newTodo.name,\n      description: this.state.newTodo.description\n    };\n\n    if (e.target.name === \"name\") {\n      newTodo.name = e.target.value;\n    } else {\n      newTodo.description = e.target.value;\n    }\n    this.setState(\n      (): IState => {\n        return {\n          newTodo: { ...newTodo },\n          todos: [...this.state.todos]\n        };\n      }\n    );\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"box\">\n          <div className=\"inputBox\">\n            <input\n              id=\"name\"\n              name=\"name\"\n              onChange={e => this.handleChange(e)}\n              type=\"text\"\n              required\n            />\n            <label htmlFor=\"name\">Name</label>\n          </div>\n          <div className=\"inputBox\">\n            <input\n              id=\"description\"\n              name=\"description\"\n              onChange={e => this.handleChange(e)}\n              type=\"text\"\n              required\n            />\n            <label htmlFor=\"description\">Description</label>\n          </div>\n          <button onClick={() => this.handleAdd()}>+</button>\n        </div>\n        <div className=\"container\">\n          <TodoList\n            onRemove={id => this.handleRemove(id)}\n            todos={this.state.todos}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}